"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/svelte-i18n";
exports.ids = ["vendor-chunks/svelte-i18n"];
exports.modules = {

/***/ "(ssr)/./node_modules/svelte-i18n/dist/runtime.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/svelte-i18n/dist/runtime.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ $format),\n/* harmony export */   addMessages: () => (/* binding */ addMessages),\n/* harmony export */   date: () => (/* binding */ $formatDate),\n/* harmony export */   defineMessages: () => (/* binding */ defineMessages),\n/* harmony export */   dictionary: () => (/* binding */ $dictionary),\n/* harmony export */   format: () => (/* binding */ $format),\n/* harmony export */   getDateFormatter: () => (/* binding */ getDateFormatter),\n/* harmony export */   getLocaleFromHash: () => (/* binding */ getLocaleFromHash),\n/* harmony export */   getLocaleFromHostname: () => (/* binding */ getLocaleFromHostname),\n/* harmony export */   getLocaleFromNavigator: () => (/* binding */ getLocaleFromNavigator),\n/* harmony export */   getLocaleFromPathname: () => (/* binding */ getLocaleFromPathname),\n/* harmony export */   getLocaleFromQueryString: () => (/* binding */ getLocaleFromQueryString),\n/* harmony export */   getMessageFormatter: () => (/* binding */ getMessageFormatter),\n/* harmony export */   getNumberFormatter: () => (/* binding */ getNumberFormatter),\n/* harmony export */   getTimeFormatter: () => (/* binding */ getTimeFormatter),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   isLoading: () => (/* binding */ $isLoading),\n/* harmony export */   json: () => (/* binding */ $getJSON),\n/* harmony export */   locale: () => (/* binding */ $locale),\n/* harmony export */   locales: () => (/* binding */ $locales),\n/* harmony export */   number: () => (/* binding */ $formatNumber),\n/* harmony export */   register: () => (/* binding */ registerLocaleLoader),\n/* harmony export */   t: () => (/* binding */ $format),\n/* harmony export */   time: () => (/* binding */ $formatTime),\n/* harmony export */   unwrapFunctionStore: () => (/* binding */ unwrapFunctionStore),\n/* harmony export */   waitLocale: () => (/* binding */ waitLocale)\n/* harmony export */ });\n/* harmony import */ var svelte_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/store */ \"(ssr)/./node_modules/svelte/store/index.mjs\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deepmerge__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/lib/src/core.js\");\n\n\n\n\nfunction delve(obj, fullKey) {\n  if (fullKey == null)\n    return void 0;\n  if (fullKey in obj) {\n    return obj[fullKey];\n  }\n  const keys = fullKey.split(\".\");\n  let result = obj;\n  for (let p = 0; p < keys.length; p++) {\n    if (typeof result === \"object\") {\n      if (p > 0) {\n        const partialKey = keys.slice(p, keys.length).join(\".\");\n        if (partialKey in result) {\n          result = result[partialKey];\n          break;\n        }\n      }\n      result = result[keys[p]];\n    } else {\n      result = void 0;\n    }\n  }\n  return result;\n}\n\nconst lookupCache = {};\nconst addToCache = (path, locale, message) => {\n  if (!message)\n    return message;\n  if (!(locale in lookupCache))\n    lookupCache[locale] = {};\n  if (!(path in lookupCache[locale]))\n    lookupCache[locale][path] = message;\n  return message;\n};\nconst lookup = (path, refLocale) => {\n  if (refLocale == null)\n    return void 0;\n  if (refLocale in lookupCache && path in lookupCache[refLocale]) {\n    return lookupCache[refLocale][path];\n  }\n  const locales = getPossibleLocales(refLocale);\n  for (let i = 0; i < locales.length; i++) {\n    const locale = locales[i];\n    const message = getMessageFromDictionary(locale, path);\n    if (message) {\n      return addToCache(path, refLocale, message);\n    }\n  }\n  return void 0;\n};\n\nlet dictionary;\nconst $dictionary = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.writable)({});\nfunction getLocaleDictionary(locale) {\n  return dictionary[locale] || null;\n}\nfunction hasLocaleDictionary(locale) {\n  return locale in dictionary;\n}\nfunction getMessageFromDictionary(locale, id) {\n  if (!hasLocaleDictionary(locale)) {\n    return null;\n  }\n  const localeDictionary = getLocaleDictionary(locale);\n  const match = delve(localeDictionary, id);\n  return match;\n}\nfunction getClosestAvailableLocale(refLocale) {\n  if (refLocale == null)\n    return void 0;\n  const relatedLocales = getPossibleLocales(refLocale);\n  for (let i = 0; i < relatedLocales.length; i++) {\n    const locale = relatedLocales[i];\n    if (hasLocaleDictionary(locale)) {\n      return locale;\n    }\n  }\n  return void 0;\n}\nfunction addMessages(locale, ...partials) {\n  delete lookupCache[locale];\n  $dictionary.update((d) => {\n    d[locale] = deepmerge__WEBPACK_IMPORTED_MODULE_1___default().all([d[locale] || {}, ...partials]);\n    return d;\n  });\n}\nconst $locales = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)(\n  [$dictionary],\n  ([dictionary2]) => Object.keys(dictionary2)\n);\n$dictionary.subscribe((newDictionary) => dictionary = newDictionary);\n\nconst queue = {};\nfunction createLocaleQueue(locale) {\n  queue[locale] = /* @__PURE__ */ new Set();\n}\nfunction removeLoaderFromQueue(locale, loader) {\n  queue[locale].delete(loader);\n  if (queue[locale].size === 0) {\n    delete queue[locale];\n  }\n}\nfunction getLocaleQueue(locale) {\n  return queue[locale];\n}\nfunction getLocalesQueues(locale) {\n  return getPossibleLocales(locale).map((localeItem) => {\n    const localeQueue = getLocaleQueue(localeItem);\n    return [localeItem, localeQueue ? [...localeQueue] : []];\n  }).filter(([, localeQueue]) => localeQueue.length > 0);\n}\nfunction hasLocaleQueue(locale) {\n  if (locale == null)\n    return false;\n  return getPossibleLocales(locale).some(\n    (localeQueue) => {\n      var _a;\n      return (_a = getLocaleQueue(localeQueue)) == null ? void 0 : _a.size;\n    }\n  );\n}\nfunction loadLocaleQueue(locale, localeQueue) {\n  const allLoadersPromise = Promise.all(\n    localeQueue.map((loader) => {\n      removeLoaderFromQueue(locale, loader);\n      return loader().then((partial) => partial.default || partial);\n    })\n  );\n  return allLoadersPromise.then((partials) => addMessages(locale, ...partials));\n}\nconst activeFlushes = {};\nfunction flush(locale) {\n  if (!hasLocaleQueue(locale)) {\n    if (locale in activeFlushes) {\n      return activeFlushes[locale];\n    }\n    return Promise.resolve();\n  }\n  const queues = getLocalesQueues(locale);\n  activeFlushes[locale] = Promise.all(\n    queues.map(\n      ([localeName, localeQueue]) => loadLocaleQueue(localeName, localeQueue)\n    )\n  ).then(() => {\n    if (hasLocaleQueue(locale)) {\n      return flush(locale);\n    }\n    delete activeFlushes[locale];\n  });\n  return activeFlushes[locale];\n}\nfunction registerLocaleLoader(locale, loader) {\n  if (!getLocaleQueue(locale))\n    createLocaleQueue(locale);\n  const localeQueue = getLocaleQueue(locale);\n  if (getLocaleQueue(locale).has(loader))\n    return;\n  if (!hasLocaleDictionary(locale)) {\n    $dictionary.update((d) => {\n      d[locale] = {};\n      return d;\n    });\n  }\n  localeQueue.add(loader);\n}\n\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\nvar __objRest$1 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$2.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$2.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst defaultFormats = {\n  number: {\n    scientific: { notation: \"scientific\" },\n    engineering: { notation: \"engineering\" },\n    compactLong: { notation: \"compact\", compactDisplay: \"long\" },\n    compactShort: { notation: \"compact\", compactDisplay: \"short\" }\n  },\n  date: {\n    short: { month: \"numeric\", day: \"numeric\", year: \"2-digit\" },\n    medium: { month: \"short\", day: \"numeric\", year: \"numeric\" },\n    long: { month: \"long\", day: \"numeric\", year: \"numeric\" },\n    full: { weekday: \"long\", month: \"long\", day: \"numeric\", year: \"numeric\" }\n  },\n  time: {\n    short: { hour: \"numeric\", minute: \"numeric\" },\n    medium: { hour: \"numeric\", minute: \"numeric\", second: \"numeric\" },\n    long: {\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      timeZoneName: \"short\"\n    },\n    full: {\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      timeZoneName: \"short\"\n    }\n  }\n};\nfunction defaultMissingKeyHandler({ locale, id }) {\n  console.warn(\n    `[svelte-i18n] The message \"${id}\" was not found in \"${getPossibleLocales(\n      locale\n    ).join('\", \"')}\".${hasLocaleQueue(getCurrentLocale()) ? `\n\nNote: there are at least one loader still registered to this locale that wasn't executed.` : \"\"}`\n  );\n}\nconst defaultOptions = {\n  fallbackLocale: null,\n  loadingDelay: 200,\n  formats: defaultFormats,\n  warnOnMissingMessages: true,\n  handleMissingMessage: void 0,\n  ignoreTag: true\n};\nconst options = defaultOptions;\nfunction getOptions() {\n  return options;\n}\nfunction init(opts) {\n  const _a = opts, { formats } = _a, rest = __objRest$1(_a, [\"formats\"]);\n  let initialLocale = opts.fallbackLocale;\n  if (opts.initialLocale) {\n    try {\n      if (intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat.resolveLocale(opts.initialLocale)) {\n        initialLocale = opts.initialLocale;\n      }\n    } catch (e) {\n      console.warn(\n        `[svelte-i18n] The initial locale \"${opts.initialLocale}\" is not a valid locale.`\n      );\n    }\n  }\n  if (rest.warnOnMissingMessages) {\n    delete rest.warnOnMissingMessages;\n    if (rest.handleMissingMessage == null) {\n      rest.handleMissingMessage = defaultMissingKeyHandler;\n    } else {\n      console.warn(\n        '[svelte-i18n] The \"warnOnMissingMessages\" option is deprecated. Please use the \"handleMissingMessage\" option instead.'\n      );\n    }\n  }\n  Object.assign(options, rest, { initialLocale });\n  if (formats) {\n    if (\"number\" in formats) {\n      Object.assign(options.formats.number, formats.number);\n    }\n    if (\"date\" in formats) {\n      Object.assign(options.formats.date, formats.date);\n    }\n    if (\"time\" in formats) {\n      Object.assign(options.formats.time, formats.time);\n    }\n  }\n  return $locale.set(initialLocale);\n}\n\nconst $isLoading = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.writable)(false);\n\nvar __defProp$1 = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$1.call(b, prop))\n      __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b)) {\n      if (__propIsEnum$1.call(b, prop))\n        __defNormalProp$1(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nlet current;\nconst internalLocale = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.writable)(null);\nfunction getSubLocales(refLocale) {\n  return refLocale.split(\"-\").map((_, i, arr) => arr.slice(0, i + 1).join(\"-\")).reverse();\n}\nfunction getPossibleLocales(refLocale, fallbackLocale = getOptions().fallbackLocale) {\n  const locales = getSubLocales(refLocale);\n  if (fallbackLocale) {\n    return [.../* @__PURE__ */ new Set([...locales, ...getSubLocales(fallbackLocale)])];\n  }\n  return locales;\n}\nfunction getCurrentLocale() {\n  return current != null ? current : void 0;\n}\ninternalLocale.subscribe((newLocale) => {\n  current = newLocale != null ? newLocale : void 0;\n  if (typeof window !== \"undefined\" && newLocale != null) {\n    document.documentElement.setAttribute(\"lang\", newLocale);\n  }\n});\nconst set = (newLocale) => {\n  if (newLocale && getClosestAvailableLocale(newLocale) && hasLocaleQueue(newLocale)) {\n    const { loadingDelay } = getOptions();\n    let loadingTimer;\n    if (typeof window !== \"undefined\" && getCurrentLocale() != null && loadingDelay) {\n      loadingTimer = window.setTimeout(\n        () => $isLoading.set(true),\n        loadingDelay\n      );\n    } else {\n      $isLoading.set(true);\n    }\n    return flush(newLocale).then(() => {\n      internalLocale.set(newLocale);\n    }).finally(() => {\n      clearTimeout(loadingTimer);\n      $isLoading.set(false);\n    });\n  }\n  return internalLocale.set(newLocale);\n};\nconst $locale = __spreadProps(__spreadValues$1({}, internalLocale), {\n  set\n});\n\nconst getFromQueryString = (queryString, key) => {\n  const keyVal = queryString.split(\"&\").find((i) => i.indexOf(`${key}=`) === 0);\n  if (keyVal) {\n    return keyVal.split(\"=\").pop();\n  }\n  return null;\n};\nconst getFirstMatch = (base, pattern) => {\n  const match = pattern.exec(base);\n  if (!match)\n    return null;\n  return match[1] || null;\n};\nconst getLocaleFromHostname = (hostname) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFirstMatch(window.location.hostname, hostname);\n};\nconst getLocaleFromPathname = (pathname) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFirstMatch(window.location.pathname, pathname);\n};\nconst getLocaleFromNavigator = () => {\n  if (typeof window === \"undefined\")\n    return null;\n  return window.navigator.language || window.navigator.languages[0];\n};\nconst getLocaleFromQueryString = (search) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFromQueryString(window.location.search.substr(1), search);\n};\nconst getLocaleFromHash = (hash) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFromQueryString(window.location.hash.substr(1), hash);\n};\n\nconst monadicMemoize = (fn) => {\n  const cache = /* @__PURE__ */ Object.create(null);\n  const memoizedFn = (arg) => {\n    const cacheKey = JSON.stringify(arg);\n    if (cacheKey in cache) {\n      return cache[cacheKey];\n    }\n    return cache[cacheKey] = fn(arg);\n  };\n  return memoizedFn;\n};\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst getIntlFormatterOptions = (type, name) => {\n  const { formats } = getOptions();\n  if (type in formats && name in formats[type]) {\n    return formats[type][name];\n  }\n  throw new Error(`[svelte-i18n] Unknown \"${name}\" ${type} format.`);\n};\nconst createNumberFormatter = monadicMemoize(\n  (_a) => {\n    var _b = _a, { locale, format } = _b, options = __objRest(_b, [\"locale\", \"format\"]);\n    if (locale == null) {\n      throw new Error('[svelte-i18n] A \"locale\" must be set to format numbers');\n    }\n    if (format) {\n      options = getIntlFormatterOptions(\"number\", format);\n    }\n    return new Intl.NumberFormat(locale, options);\n  }\n);\nconst createDateFormatter = monadicMemoize(\n  (_c) => {\n    var _d = _c, { locale, format } = _d, options = __objRest(_d, [\"locale\", \"format\"]);\n    if (locale == null) {\n      throw new Error('[svelte-i18n] A \"locale\" must be set to format dates');\n    }\n    if (format) {\n      options = getIntlFormatterOptions(\"date\", format);\n    } else if (Object.keys(options).length === 0) {\n      options = getIntlFormatterOptions(\"date\", \"short\");\n    }\n    return new Intl.DateTimeFormat(locale, options);\n  }\n);\nconst createTimeFormatter = monadicMemoize(\n  (_e) => {\n    var _f = _e, { locale, format } = _f, options = __objRest(_f, [\"locale\", \"format\"]);\n    if (locale == null) {\n      throw new Error(\n        '[svelte-i18n] A \"locale\" must be set to format time values'\n      );\n    }\n    if (format) {\n      options = getIntlFormatterOptions(\"time\", format);\n    } else if (Object.keys(options).length === 0) {\n      options = getIntlFormatterOptions(\"time\", \"short\");\n    }\n    return new Intl.DateTimeFormat(locale, options);\n  }\n);\nconst getNumberFormatter = (_g = {}) => {\n  var _h = _g, {\n    locale = getCurrentLocale()\n  } = _h, args = __objRest(_h, [\n    \"locale\"\n  ]);\n  return createNumberFormatter(__spreadValues({ locale }, args));\n};\nconst getDateFormatter = (_i = {}) => {\n  var _j = _i, {\n    locale = getCurrentLocale()\n  } = _j, args = __objRest(_j, [\n    \"locale\"\n  ]);\n  return createDateFormatter(__spreadValues({ locale }, args));\n};\nconst getTimeFormatter = (_k = {}) => {\n  var _l = _k, {\n    locale = getCurrentLocale()\n  } = _l, args = __objRest(_l, [\n    \"locale\"\n  ]);\n  return createTimeFormatter(__spreadValues({ locale }, args));\n};\nconst getMessageFormatter = monadicMemoize(\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  (message, locale = getCurrentLocale()) => new intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat(message, locale, getOptions().formats, {\n    ignoreTag: getOptions().ignoreTag\n  })\n);\n\nconst formatMessage = (id, options = {}) => {\n  var _a, _b, _c, _d;\n  let messageObj = options;\n  if (typeof id === \"object\") {\n    messageObj = id;\n    id = messageObj.id;\n  }\n  const {\n    values,\n    locale = getCurrentLocale(),\n    default: defaultValue\n  } = messageObj;\n  if (locale == null) {\n    throw new Error(\n      \"[svelte-i18n] Cannot format a message without first setting the initial locale.\"\n    );\n  }\n  let message = lookup(id, locale);\n  if (!message) {\n    message = (_d = (_c = (_b = (_a = getOptions()).handleMissingMessage) == null ? void 0 : _b.call(_a, { locale, id, defaultValue })) != null ? _c : defaultValue) != null ? _d : id;\n  } else if (typeof message !== \"string\") {\n    console.warn(\n      `[svelte-i18n] Message with id \"${id}\" must be of type \"string\", found: \"${typeof message}\". Gettin its value through the \"$format\" method is deprecated; use the \"json\" method instead.`\n    );\n    return message;\n  }\n  if (!values) {\n    return message;\n  }\n  let result = message;\n  try {\n    result = getMessageFormatter(message, locale).format(values);\n  } catch (e) {\n    if (e instanceof Error) {\n      console.warn(\n        `[svelte-i18n] Message \"${id}\" has syntax error:`,\n        e.message\n      );\n    }\n  }\n  return result;\n};\nconst formatTime = (t, options) => {\n  return getTimeFormatter(options).format(t);\n};\nconst formatDate = (d, options) => {\n  return getDateFormatter(options).format(d);\n};\nconst formatNumber = (n, options) => {\n  return getNumberFormatter(options).format(n);\n};\nconst getJSON = (id, locale = getCurrentLocale()) => {\n  return lookup(id, locale);\n};\nconst $format = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale, $dictionary], () => formatMessage);\nconst $formatTime = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale], () => formatTime);\nconst $formatDate = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale], () => formatDate);\nconst $formatNumber = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale], () => formatNumber);\nconst $getJSON = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale, $dictionary], () => getJSON);\n\nfunction unwrapFunctionStore(store) {\n  let localReference;\n  const cancel = store.subscribe((value) => localReference = value);\n  const fn = (...args) => localReference(...args);\n  fn.freeze = cancel;\n  return fn;\n}\n\nfunction defineMessages(i) {\n  return i;\n}\nfunction waitLocale(locale) {\n  return flush(locale || getCurrentLocale() || getOptions().initialLocale);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/svelte-i18n/dist/runtime.esm.js\n");

/***/ })

};
;